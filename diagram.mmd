graph TD

%% =========================
%% NETWORKING LAYER
%% =========================
subgraph VPC["AWS VPC (2 AZs)"]
  direction TB

  subgraph PublicSubnets["Public Subnets"]
    IGW["Internet Gateway"]
    NAT["NAT Gateway"]
    ALB["Application Load Balancer"]
    Jenkins["Jenkins Server (EC2)"]
  end

  subgraph PrivateSubnets["Private Subnets"]
    subgraph EKS["Amazon EKS Cluster"]
      NodeGroup1["Node Group 1"]
      NodeGroup2["Node Group 2"]
      Istio["Istio Service Mesh"]
      Helm["Helm Deployer"]
    end

    RDS["Amazon RDS (PostgreSQL)"]
    Redis["Amazon ElastiCache (Redis)"]
  end
end

%% =========================
%% STORAGE + SECRETS
%% =========================
S3["Amazon S3 (static assets + Terraform state)"]
SSM["AWS SSM Parameter Store (Secrets)"]
KMS["AWS KMS (Encryption Keys)"]

%% =========================
%% CI/CD PIPELINE
%% =========================
subgraph CICD["Jenkins Pipeline"]
  GitHub["GitHub Repository"]
  Lint["Lint + Unit Tests"]
  Build["Docker Build & Push to ECR"]
  TF["Terraform Validate & Apply"]
  Deploy["Helm Deploy to EKS"]
  Gemini["Google Gemini Security Scan"]
end

%% =========================
%% MONITORING & SECURITY
%% =========================
CloudWatch["Amazon CloudWatch (Metrics, Logs, Alarms)"]
SNS["Amazon SNS (Notifications)"]
Config["AWS Config Rules"]
GuardDuty["Amazon GuardDuty"]

%% =========================
%% RELATIONSHIPS
%% =========================
GitHub --> Jenkins
Jenkins --> Lint --> Build --> TF --> Deploy --> Gemini
Build --> ECR["Amazon ECR"]
TF --> S3
TF --> VPC
Deploy --> EKS

ALB --> Istio
Istio --> NodeGroup1 & NodeGroup2
NodeGroup1 --> RDS
NodeGroup1 --> Redis

EKS --> CloudWatch
RDS --> CloudWatch
Redis --> CloudWatch
Jenkins --> CloudWatch

CloudWatch --> SNS
Config --> SNS
GuardDuty --> SNS

SSM --> EKS
KMS --> RDS
KMS --> S3
KMS --> Redis
